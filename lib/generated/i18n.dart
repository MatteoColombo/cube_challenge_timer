import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get amoledTheme => "Amoled black theme";
  String get defaultTheme => "Default black theme";
  String get deleteLast => "Delete last";
  String get dnf => "DNF";
  String get generating => "Generating scrambles...";
  String get hideTime => "Hide time when solving";
  String get ok => "OK";
  String get options => "Options";
  String get penalty => "+2";
  String get ready => "Ready";
  String get reset => "Reset sessione";
  String get selectPuzzle => "Select puzzle";
  String get showTime => "Show time when solving";
  String get solving => "Solving";
  String get type_222 => "2x2x2 Cube";
  String get type_333 => "3x3x3 Cube";
  String get type_444 => "4x4x4 Cube";
  String get type_555 => "5x5x5 Cube";
  String get type_666 => "6x6x6 Cube";
  String get type_777 => "7x7x7 Cube";
  String get type_clock => "Clock";
  String get type_minx => "Megaminx";
  String get type_pyram => "Pyraminx";
  String get type_skwb => "Skewb";
  String get type_sq1 => "Square-1";
}

class $en extends S {
  const $en();
}

class $it extends S {
  const $it();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get selectPuzzle => "Seleziona puzzle";
  @override
  String get solving => "Risolvendo";
  @override
  String get type_666 => "Cubo 6x6x6";
  @override
  String get penalty => "+2";
  @override
  String get deleteLast => "Cancella ultimo";
  @override
  String get type_pyram => "Pyraminx";
  @override
  String get generating => "Generazione scramble...";
  @override
  String get defaultTheme => "Tema nero default";
  @override
  String get ready => "Pronto";
  @override
  String get options => "Opzioni";
  @override
  String get type_222 => "Cubo 2x2x2";
  @override
  String get type_444 => "Cubo 4x4x4";
  @override
  String get ok => "OK";
  @override
  String get dnf => "DNF";
  @override
  String get amoledTheme => "Tema nero amoled";
  @override
  String get type_555 => "Cubo 5x5x5";
  @override
  String get type_777 => "Cubo 7x7x7";
  @override
  String get showTime => "Mostra tempo";
  @override
  String get hideTime => "Nascondi tempo";
  @override
  String get type_clock => "Clock";
  @override
  String get reset => "Cancella sessione";
  @override
  String get type_333 => "Cubo 3x3x3";
  @override
  String get type_minx => "Megaminx";
  @override
  String get type_sq1 => "Square-1";
  @override
  String get type_skwb => "Skewb";
}

class $es extends S {
  const $es();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get selectPuzzle => "Selecciona puzzle";
  @override
  String get solving => "Resolviendo";
  @override
  String get type_666 => "Cubo 6x6x6";
  @override
  String get penalty => "+2";
  @override
  String get deleteLast => "Elimina el último";
  @override
  String get type_pyram => "Pyraminx";
  @override
  String get generating => "Generando mezcla…";
  @override
  String get defaultTheme => "Tema negro predefinido";
  @override
  String get ready => "Listo";
  @override
  String get options => "Opciones";
  @override
  String get type_222 => "Cubo 2x2x2";
  @override
  String get type_444 => "Cubo 4x4x4";
  @override
  String get ok => "OK";
  @override
  String get dnf => "DNF";
  @override
  String get amoledTheme => "Tema negro amoled";
  @override
  String get type_555 => "Cubo 5x5x5";
  @override
  String get type_777 => "Cubo 7x7x7";
  @override
  String get showTime => "Muestra el tiempo";
  @override
  String get hideTime => "Esconde el tiempo";
  @override
  String get type_clock => "Clock";
  @override
  String get reset => "Reinicia la sesión";
  @override
  String get type_333 => "Cubo 3x3x3";
  @override
  String get type_minx => "Megaminx";
  @override
  String get type_sq1 => "Square-1";
  @override
  String get type_skwb => "Skewb";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("it", ""),
      Locale("es", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "it":
          return SynchronousFuture<S>(const $it());
        case "es":
          return SynchronousFuture<S>(const $es());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
